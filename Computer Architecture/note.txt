// 
// 컴퓨터구조 1주차 3. 2. 
// 
이 네 가지 부분이 개인이 잘 챙겨야 한다 이것들을 100점 만점으로 환산해서 학점 나온다

교재
생능출판사 컴퓨터구조론 책. 4번째 개정판 2014년

텍스트
강의자료만 보고 하지 말자
과목의 내용을 자세한 부분까지 쉽게 이해할 수 있는 정보를 제공해주는 도구
파워포인트만 보게 되면 반쪽자리 지식을 얻을 가능성 수업시간의 제약때문에 모든 걸 말하기 힘들다
각 과목마다 전체적인 내용을 알고 졸업하자
외울 내용이 많아 이렇게 강조할지도 모르겠다

우리 학과의 거의 유일한 하드웨어 과목이다
sw 개발하는데 hw의 특성도 알아야
다양한 hw 제약성과 이질성 고려한 좋은 sw
한정된 리소스에 적합한 sw

sw
로직

hw
퍼포먼스

iot
다양한 종류 디바이스
모든 종류의 hw 배우지 않는다
컴퓨터의 기본적인 hw 배운다
여기서 벗어나지 않는다

hw 어렵지만 잘 할 수 있다

엔드 유저 관점보단 프로그래머 관점 컴퓨터 구조 시스템 공부

lms
다른 웹페이지 만들지 않고 lms 쓰겠다
텍스트 기반 강의 자료 1 - 6장 예습복습
중간 기말 공지도 LMS

중간고사
반드시 8주째일 필요는 없다
9주나 10주에 볼 수도 있다
최소한 2주 앞 수업시간 lms 중간고사 공지 하겠다
사람이 많아 강의실을 추가로 빌릴 듯

기말고사
15주 겠지만
보강 있으면 16주 일 수 도 있다

과제
온라인으로 받지 않는다
프린트 오프라인 제출
왜냐면 해킹을해서 이름을 바꿔서 올리는 경우가 있더라고요
워드 ppt 손글씨 가능

첫 페이지 
문제나 리포트 내용을 쓰지 말고 과목과 리포트에 대한 정보
제목 과목명 담당교수 본인의 학과 학번 이름
그냥 공책이나 그것도 스테이플러도 없이 제출하면 제가 찍긴 하겠지만 그건 예의가 아니다. 전세계 어딜 가나 리포트를 낼 때 예의다. 안하면 보관하다가 없어질 수도 있습니다. 반드시 꼼꼼히 챙겨서 제출해주시기 바랍니다. 

소자
hw소자를 구성요소소

보드
소자 사이 커뮤니케이션
소자끼리 협동으로 완제품
구리선 라인 선로
쉅시간엔 일반적인 hw구성을 배우는게 아니라 컴과니까 sw에 그나마 관련된 걸 배워요. Sw는 로직이에요. 일을 어떻게 수행할것인가를 언어를 통해서 구현합니다. 그걸 하드웨어 가 구동할 수 있는 언어로 바꿔. hw는 능동적이지 않고 수동적인 형태입니다. 기계적인 해석을 하고 처리한다. 프로그램을 만들어도 HW는 이해하지 못한다. C나 자바나 하스켈은 사람이 이해하는 하이레벨 랭귀지인데 컴퓨터는 근본적으로 기계어를 이해하잖아요 컴퓨터를 만들 때 첨에 컴퓨터가 이해할 수 있는 언어를 이진수로 설계해요. 그 명령어를 찍게 되면 여러 소자들에게 전기적 신호를 보내서 동작합니다. 이 과목을 왜 여러분이 들어야 하냐면 우린 sw를 개발하지만 임베디드 라고도 해요 Tv에도 Cpu, memory가 있어요. 맛폰이나 태블릿엔 작은 센서가 있어요. 상황을 모니터링 감시하려면 센서를 쓴다. 폰엔 메모리+보조기억장치인 플래시메모리가 들어가 있지. Pc랑 모양새가 다르지. 컴퓨터 디바이스의 형태가 다양하단 말이야.다양한 환경에 맞는 장치들에 대해서 sw 개발을 해야한다. Hw에 대한 지식이 없으면 비효율적이거나 안맞는 sw를 만들 수 있는거에요. 알고리듬을 그런거에 맞게 만들 수 있어야 하기 때문에 이 과목을 수업한다.

컴퓨터의 기본구조를 먼저 설명드립니다 컴퓨터에서 어떻게 명령어를 저장하는지 어떻게 구성요소들 사이에 인터랙션을 하는지.
시스템이란 말엔 hw와 sw가 다 들어갑니다. 시스템에는 목적이 있습니다. 시스템 하나는 몇 가지로 나눠서 보면 Cpu, memory, 보조기억장치, 입출력장치. 여기다 네트웍. 3, 4, 5가지.
Appplication sw - System sw - hw
시스템 sw엔 os나, 데이터 프로그램 등 
Application sw는 워드나 파워포인트 등 사용자가 특정 목적으로 쓸 수 있게 나온다. 
크게는 sw와 hw로 나눠져있다. Sw는 로직, 일의 순서를 명령어들을 써서 표현하는 거고 일은 hw가 알아먹는 언어로 받아들여서 중앙처리장치가 받아들여서 명령을 수행하는 모양새다. 
Hw 정의 : 정보들의 전송통로를 제공, 정보 처리가 일어나게 해주는 물리적인 실체다. 시스템 버스로 구성요소간에 상호작용하는 네트웤이 있어. 소자를 꼽아 놓는다. 예를 들어 메모리에서 cpu로 데이터 보낼 때 통로를 제공해준다. 처리하려면 hw에서 명령자가 있어야하고. Compute뜻은 계산하단 뜻이다 컴퓨터의 기초는 계산능력. 이걸 어떻게 결합시켜서 우리가 쓰는 컴의 모습. 처리를 주도적으로 하는게 cpu고 다른 것들도 필요한 모양새. 
Sw의 정의는 hw가 일을 어떻게 할것인가에 대해서, 데이터가 어떻게 왔다갔다 하는 지에 대한 로직, 정보처리의 방향, 종류, 시간, 명령의 집합. 
시스템 sw과 애플리케이션 sw엔 os와 web browser를 례로 들었음
Hw의 주요 요소들 : 중앙처리장치 기억장치 입출력장치 전원공급. 크게 네 개로 나뉘어져 있고. 
요것도 대부분 아는 내용인데 컴퓨터의 기본 구조가 어떻고, 기본 기능이 어떤가? 입력장치를 통해 데이터를 읽어서 그것을 처리하는 것을 실현할땐 hw가 코드를 하나씩 처리해서 램이나 보조기억장치에 결과를 저장한다. 
Read, processing, store. 주기억장치와 보조기억장치, 시스템 버스가 중요한 구성 요소입니다. 버스, 튜브, 버터플라이를 시스템 연결자라고 합니다. 택시와 버스, 택시는 개인에 대한 서비스고, 버스는 아니다. 싼 대중적인 컴은 연결 라인을 버스 형태로 구성합니다. 따라서 논리적으로 라인을 하나라고 볼 수 있죠. 같이 쓰기 때문에 누가 쓰겠다고 요청을 하죠. 그게 충돌이 일어나지 않도록 중재 하는 시스템도 나중에 보기 될 겁니다. 지금은 그 생각은 말고, 시스템 버스로 상호작용을 한다고 보시면 됩니다. 택시 형태는 비싸고 일반 적인 pc선 말고 수퍼컴퓨터나 고가의 컴퓨터에서 써서 구성요소간의 커뮤니케이션 속도를 굉장히 높입니다.
프로세서와 cpu 용어를 구분할줄 알아야 합니다. 프로세서는 cpu를 포함해 하드웨어 처리를 할 줄 아는 능력을 가진 걸 말하고 그것들 중 가장 좋은게 cpu입니다. Cpu밖에 다른 프로세서는 몇가지가 있는데 그래픽 카드라던지—피시방에서 하면 화면도 좋고 fps도 좋고 하죠 그래픽 카드가 좋아서 그래요—그건 수학입니다 복잡한 함수 처리를 하는 겁니다—co-processor라고 불러요. Cpu 말고 특수한 목적을 위해 있어요. 컴퓨터를 보면 프로세서가 하나가 아니라 여러 가지가 있어요 하드웨어를 제어하는 프로세서도 있고, 점점 보조 프로세서들이 많이 장착되고 있다. 보조프로세서는 cpu의 말을 듣는다 cpu가 대장이다 얘가 명령을 내려야만 보조프로세서가 일한다. 이제 프로세서와 cpu의 구별이 되냐?
중앙처리장치의 중요한 기능은 명령어(프로그램) 처리, 데이터 처리. 옛날엔 계산을 기계장치가 했는데 지금은 대부분 전자장치다. 전자장치가 훨 빠르다. 레코드 판은 헤드가 움직여 처음에 시작하는 부분을 읽지 이게 기계장치다. 느리다. 전자장치는 빠르다. 고속 액세스. 액세스는 그 데이터를 읽던지 쓰던지, 한국말로 접근이라 한다. 주기억장치는 가격이 높고 용량은 작다. 하드는 1테라인데 램은 8기가다. 영구 저장 능력이 없다. 주기억장치의 특징은 파워를 끄면 램에 데이터가 사라지고 다시 켰을 때 복원이 안된다라는 특성이 있다. 보조기억 장치가 필요한 이유다. 영구 저장 능력이 필요하다. 일시적 저장 장치로만 주기억 장치를 쓴다. 
보조기억장치는 용량이 크다, 비트당 값이 낮다 대신 읽기와 쓰기 속도가 느리다. 영구 저장능력이 있다!  
입출력장치는 키보드, 프린트, 화면 등. 네트웤도 어찌 보면 입출력 장치다. 입력만, 출력만, 둘 다 되는것도. 있다. 어찌 보면 보조기억장치도 입출력장치로 놓는다. 

정보를 표현한다. 컴파일러는 하이 레벨 랭귀지, c나 포트란, 자바나 사람이 쉽게 인식할 수 있는 언어를 기계가 이해할 수 있은 이진수 형태로 바꿔주는 기능을 한다. 기계어는 전공자만이 쓸 수 있다.
변수는 박스라고 생각하자. 
LOAD A, X 메모리에 있는 번지 X의 값을 레지스터 A에 로드
ADD A, Y 메모리에 있는 번지 Y의 값을 레지스터 A에 로드된 값과 더하고나서 결과를 A에 로드
STOR Z, A 그 값을 기억당치 Z번지에 스토어
컴파일러는 C코드를 기계어로 번역할 뿐이다. 그 디바이스에 맞는 기계어로 찾아서 번역해주지는 않는다. 그 코드의 효율성 등은 프로그래머에게 달려있는 거에요. 컴퓨터구조를 모르는 프로그래머가 하면 그거에 잘 맞지 않는 코드를 작성하게 된다. 컴파일러는 고급언어 코드를 기계어 코드로 번역한다. 어셈블러는 어셈블리 코드를 기계어로 번역한다. 뉴모닉스는 니모닉스라고 써닜지만 뉴모닉스라 발음합니다 못봤어 못들었어
기계어 코드에 형식이 있습니다. 필드가 있어요. (포맷팅 필드라고 할까?)
연산 코드, 오퍼랜드. 연산 코드는 어떤 연산인가를 말한다. 오퍼랜드는 데이터 값 또는 저장된 어드레스를 말한다. 기억장치에 X(변수 이름)라고 표현되어 있겠어요? 그 X는 메모리의 어드레스로 바뀝니다. 그럼 주소값으로 가면 값이 있는거에요. 그 값을 cpu로 가져와서 연산을 하는거에요. 연산 코드는 실제로 cpu가 어떤 연산을 하는지 말하는거에요. 항상 3비트로 되어있는건 아니고. 32비트 컴퓨터라고 할 때 한번에 처리할 수 있는 명령어의 크기가 32비트란 뜻이에요. 오퍼랜드는 실제값일수도있지만 대부분 메모리 어드레스를 써놓죠. 연산 코드가 명령을 16개 표현하려면 4비트를 쓰면 되는거야. 2의 4제곱. 
주기억장치에 코드와 데이터가 공존해요. 메모리에 저장할 때 컴퓨터마다 하나의 주소에 할당하는 공간을 워드라고 합니다. 램을 례로 들어서 워드하나가 8비트, 그럼 워드 크기에 따라 한번에 할당되는 공간의 크기가 달라지는 거죠. 한 번에 메모리-시피유가 전송하는 단위를 워드라고 합니다. 이 사이즈는 컴퓨터마다 달라질수있져 8비트 16비트 32비트 한번에 cpu에 의해 처리되는 단위. 주소 지정은 기본적으로 워드 단위로 하는데 어떤 컴퓨터는 바이트 단위로 할수도 있어요. 
명령어 코드와 데이터는 같은 메모리에 공존할수있지만 다른 곳에 놓는다. 프로그램 코드는 일단은 안변하잖아. 변하는건 일단은 집어치우자고. 코드를 로드시켰을때 코드는 일반적으로 변하지 않는다고. 하자만 데이터는 변하지. 그래서 프로그램을 로드하는 공간과 데이터를 로드하는 공간은 나뉘어 있어요. 이건 운영체제 시간에 배우게 될 겁니다. 
명령어가 세 개 있었잖아 로드 애드 스토어. 암튼 그런 거고.
처음에 모르갰다고 당황하지 말고. 2장가서 배우니까. 그렇게 생각하고. 첫날에 만나서 반갑고, 요 한학기 동안 컴퓨터 구조라는 딱딱하만은 하드웨어라는 걸 잘 숙지해서 소프트웨어 개발할때 효과적이고 효율적으로 할수있게하는 한학기동안의 강의가 되었으면 좋겠습니다. 여러분들이 노력을 해서 향상시킬수 있는 클래스가 되었으면 좋겠습니다. 다음주부터 본격적으로 컴퓨터구조에 대해서 배우도록 하겠습니다. 

// 
// 컴퓨터구조 2주차 3. 9. 
// 
CPU
주기억장치
보조기억장치
2진수·어셈블리(머신 코드)와 high level language
어셈블리는 복잡도가 낮다 머신 코드와 일대일 대응하기 때문이다
고급 언어의 복잡도는 높다 컴파일러가 일해야 한다

레지스터
크기(용량)는 보통 워드 크기이다 CPU안의 기억장치이며 다양한 개수가 박혀 있다

폰 노이만 아키텍처
RAM에 코드와 데이터를 공존시킨다
RAM은 구분하지 못하고 CPU가 구분한다

시스템 버스의 어드레스 버스.어드레스의 최대 개수는 폭의 비트 수에 따른다
컨트롤 버스
           | ---- 어드레스 버스 ---> |
CPU  | <---- 데이터 버스 -----> |    기억장치
           | - 메모리 wtire signal ->|
           | - 메모리 read signal -> |
어르데스 버스(32비트짜리?)를 먼저 보내고 도착 뒤데 컨트롤 버스를 보내 에러를 막는다

메모리 리드 타임
시피유가 어드레스와 데이터를 보내고 메모리의 정보가 도착할 때 시간

메모리 라이트 타임
중앙처리장치가 어드레스와 데이터를 보내고 저장이 끝날 때 시간

중앙처리장치 - 시스템 버스 - I/O 디바이스 컨트롤러 - I/O 디바이스
I/O프로세서가 있다!

키보드의 스테이터스 레지스터에는 데이터 읽기 가능 / 불가능 비트가 들어 있다

I/O 디바이스 컨트롤러
중앙처리장치에게 I/O 명령을 받고 디바이스를 컨트롤하고 데이터를 이동시킨다

스테이터스 레지스터
RDY 비트 데이터 전송 확인(ACK) 비트
키보드 데이터 입력 과정 : 스테이터스 레지스터를 읽고 In_RDY가 1이면 데이터 레지스터에서 아스키 값을 읽는다. 0이면 스테이터스 레지스터를 읽는 걸 루프한다.
프런터 데이터 출력 과정 : 스테이터스 레지스터를 읽고 Out_RDY가 1이면 데이터 레지스터에 내용을 쓴다. 0이면 스테이터스 레지스터를 읽는 걸 루프한다.

중앙처리장치와 보조기억장치의 접속. 키보드와 프린트는 바이트 전위로 전송. 보조기억장치는 블럭(512/1024/4096바이트) 단위로 전송. 따라서 컨트롤러 안에 한 블럭을 임시 저장할 수 있는 데이터 버퍼(트랙 버퍼)가 있다. 
컴퓨터의 기본적 기능. 프로그램 실행, 데이터 저장·이동·I/O, 제어(프로그램 실행 순서 컨트롤)
진공관 -> 트랜지스터 -> 반도체 집적회로(IC). 처리 속도 향상, 저장 용량 증가, 크기 줄어듦, 값 내림, 신뢰도 올림

파스칼, 덧·뺄셈. 라이프니츠, 사칙연산.
찰스 배비지, Difference Engine, 덧·뺄셈 자동계산, 펀치 프린트
찰스 배비지, Analytical Engine, 19세기, 사칙연산, 프로그램(조건 분기, 제어 카드로 실행 순서) 기능, MILL, STORE, 카드 판독기, 카드 펀치기, 프린터
에니악, 폰 노이만, 진공관 전자식(그 이전엔 기계식이었다). 
에드박. Stored-program, 프로그램과 데이터를 안에 저장, 2진수 씀, 폰 노이만 아키텍처
IAS 컴퓨터, stored-program, 프로그램 컨트롤 유닛, 산술논리연산장치, 주기억 장치, I/O 디바이스, 시피유 안의 프로그램 카운터(레지스터)

폰 노이만 아키텍처
산술논리연산장치 + 프로그램 컨트롤 유닛  = CPU
안에 레지스터 들어있다

SSL small scale IC MSI medium scale IC LSI large scale IC
IC LSI VLSI ULSI
VLSI로 PC를 개발했다
임베디드 컴퓨터 기계 내장
워크스테이션
64-비트 마이크로프로세서

슈퍼마니컴퓨터
멀티프로세서시스템
 우리학교면 이정도로 충분히 돌아간다

메인프레임
다중 I/O 개큼
대기업 비즈니스용

슈퍼컴퓨터
커스터마이징이나 전용 하드웨어를 박는다 그래서 몇천억원도 한다
국가적 특수 목적

그래서 슈퍼컴퓨터이냐 메인프레임 중 어느게 더 능력이 좋냐는 아님

// 
// 컴퓨터구조 3주차 3. 16. 
// 
컨트롤 버스

인터럽트 신호
입출력장치에서 cpu로 보내는 작업이 끝났다는 신호

시스템 버스는 전용선이 아니다
데이터의 충돌을 방지하기 위해서  버스 중계기arbitrator에게 사용 요청을 한다

폰 노이만 아키텍처
산술논리연산장치ALU + 프로그램 컨트롤 유닛 = CPU
cpu안에 레지스터 들어있다

클러스터 컴퓨터
워크스테이션의 집합체
분산 병렬 처리의 영역
네트워크로 연결되어 있다 고속 LAN 이라던지

Ch. 2
CPU 구조 기능

CPU 기본 구조
명령어 실행
명령어 파이프라이닝
명령어 세트instruction set

CPU 기능

명령어 인출instruction fetch
기억장치로부터 명령어 읽어온다

명령어 해독instruction decode
제어장치에서 해석한다

모든 명령어들에 다 수행한다

데이터 인출data fetch

데이터 처리data process
논리 연산

데이터 쓰기data store
결과 저장

CPU 구조

산술 논리 연산 장치 ALU
사칙 연산
논리 연산

레지스터 세트
컨트롤 유닛

instruction cycle
아너무졸리다아아

프로그ㅓㅐㅇ 카눈ㄹ>버
//주석 부분입니다
3 40분 잔듯ㅋㅋㅋㅋㅋ
MAR MBR이 용어를 친숙하게 다루도록 하렴

특수 레지스터 일반 레지스터
대부분이 특수 레지스터고 일반 레지스터는 별로 없다
